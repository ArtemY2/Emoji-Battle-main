// ‚úÖ server/index.ts ‚Äî –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–æ–≥–æ–≤
import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';

const app = express();
app.use(cors());

const httpServer = createServer(app);
const io = new Server(httpServer, {
    cors: { origin: '*' },
    transports: ['websocket', 'polling']
});

interface Player {
    id: string;
    name: string;
}

let openRooms: { [roomId: string]: Player[] } = {};
const socketToName: { [socketId: string]: string } = {};

const rooms: {
    [roomId: string]: {
        answer: string;
        scores: { [socketId: string]: number };
        players: { [socketId: string]: { name: string; avatar?: string } }; // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
        roundActive: boolean;
        roundCount: number;
        timer?: NodeJS.Timeout;
    };
} = {};

const questions = [
    { emoji: 'üêçüéÆ', answer: 'snake game' },
    { emoji: 'üê∏', answer: 'frog' },
    { emoji: 'üöóüí®', answer: 'fast car' },
    { emoji: 'üõ∏üëΩ', answer: 'ufo' },
    { emoji: 'üèπüêó', answer: 'hunting' },
    { emoji: 'üéØüî•', answer: 'target practice' },
    { emoji: 'üß†üóØÔ∏è', answer: 'mind reading' },
    { emoji: 'üçïüçîüçü', answer: 'fast food' },
    { emoji: 'üé∂üëÇ', answer: 'music listening' },
    { emoji: 'üì∏üñºÔ∏è', answer: 'photography' },
];

const MAX_ROUNDS = 3;
const DEV_MODE = process.env.DEV_MODE === 'true';

io.on('connection', (socket) => {
    if (DEV_MODE) console.log('üîó –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    socket.on('quickJoin', ({ name }) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–æ–∫–µ—Ç
        if (socketToName[socket.id]) {
            console.log('‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', socket.id);
            return;
        }

        console.log(`üë§ ${name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è...`);

        let assignedRoom = '';

        // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–º–Ω–∞—Ç—É
        for (const r in openRooms) {
            if (openRooms[r].length < 5) {
                assignedRoom = r;
                break;
            }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!assignedRoom) {
            assignedRoom = 'room-' + Math.floor(Math.random() * 100000);
            openRooms[assignedRoom] = [];
            console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${assignedRoom}`);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        openRooms[assignedRoom].push({ id: socket.id, name });
        socketToName[socket.id] = name;
        socket.join(assignedRoom);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã
        if (!rooms[assignedRoom]) {
            rooms[assignedRoom] = {
                answer: '',
                scores: {},
                players: {},
                roundActive: false,
                roundCount: 0,
            };
        }
        rooms[assignedRoom].scores[socket.id] = 0;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ (–∏–º—è + –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ —ç—Ç–æ –≥–æ—Å—Ç—å)
        const playerInfo: { name: string; avatar?: string } = { name };

        // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Å—Ç—å —Å —ç–º–æ–¥–∑–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        if (name.includes('Í≤åÏä§Ìä∏')) {
            const emojiMatch = name.match(/[üê∂üê±ü¶äüêªüêºüêØüê∞üê®]/);
            if (emojiMatch) {
                playerInfo.avatar = emojiMatch[0];
            }
        }

        rooms[assignedRoom].players[socket.id] = playerInfo;

        socket.emit('joinedRoom', assignedRoom);
        io.to(assignedRoom).emit('updateLobby', openRooms[assignedRoom]);

        console.log(`‚úÖ ${name} –≤ –∫–æ–º–Ω–∞—Ç–µ ${assignedRoom} (${openRooms[assignedRoom].length} –∏–≥—Ä–æ–∫–æ–≤)`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
        const minPlayers = DEV_MODE ? 1 : 5;
        if (openRooms[assignedRoom].length >= minPlayers) {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ ${assignedRoom}!`);

            // –ù–ï —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É —Å—Ä–∞–∑—É, –∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"
            setTimeout(() => {
                console.log(`üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º goToGame –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${assignedRoom}`);
                console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${assignedRoom}:`, openRooms[assignedRoom]?.map(p => p.name));

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
                openRooms[assignedRoom]?.forEach(player => {
                    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º goToGame –∏–≥—Ä–æ–∫—É ${player.name} (${player.id})`);
                    io.to(player.id).emit('goToGame', assignedRoom);
                });

                // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    if (openRooms[assignedRoom]) {
                        delete openRooms[assignedRoom];
                        console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${assignedRoom} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö`);
                    }
                }, 5000);

            }, 1000); // –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
        }
    });

    socket.on('startRound', (roomId) => {
        const room = rooms[roomId];
        if (!room || room.roundActive) return;

        const q = questions[Math.floor(Math.random() * questions.length)];
        room.answer = q.answer.toLowerCase();
        room.roundActive = true;
        room.roundCount += 1;

        console.log(`üéØ –†–∞—É–Ω–¥ ${room.roundCount} –≤ ${roomId}: ${q.answer}`);

        io.to(roomId).emit('roundStart', { emoji: q.emoji });

        // –¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞
        room.timer = setTimeout(() => {
            if (room.roundActive) {
                room.roundActive = false;
                console.log(`‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –≤ ${roomId}`);

                io.to(roomId).emit('roundEnd', {
                    correct: q.answer,
                    scores: room.scores
                });

                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                if (room.roundCount < MAX_ROUNDS) {
                    setTimeout(() => {
                        io.to(roomId).emit('nextRound');
                    }, 3000);
                } else {
                    console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ ${roomId}`);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–∞—Ö
                    io.to(roomId).emit('gameOver', {
                        scores: room.scores,
                        players: room.players
                    });
                }
            }
        }, 20000);
    });

    socket.on('sendGuess', ({ roomId, message }) => {
        const room = rooms[roomId];
        if (!room || !room.roundActive) return;

        const playerName = socketToName[socket.id] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
        const normalized = message.toLowerCase().trim();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        io.to(roomId).emit('newGuess', {
            name: playerName,
            message: message,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if (normalized === room.answer) {
            room.roundActive = false;
            clearTimeout(room.timer);
            room.scores[socket.id] += 1;

            console.log(`‚úÖ ${playerName} —É–≥–∞–¥–∞–ª: ${room.answer}`);

            io.to(roomId).emit('correctGuess', {
                socketId: socket.id,
                playerName: playerName,
            });

            io.to(roomId).emit('roundEnd', {
                correct: room.answer,
                scores: room.scores,
            });

            // –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
            if (room.roundCount < MAX_ROUNDS) {
                setTimeout(() => {
                    io.to(roomId).emit('nextRound');
                }, 3000);
            } else {
                console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ ${roomId}`);
                io.to(roomId).emit('gameOver', { scores: room.scores });
            }
        }
    });

    socket.on('disconnect', () => {
        const playerName = socketToName[socket.id];
        if (playerName && DEV_MODE) {
            console.log(`üëã ${playerName} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
        }

        delete socketToName[socket.id];

        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç
        for (const roomId in openRooms) {
            const oldLength = openRooms[roomId].length;
            openRooms[roomId] = openRooms[roomId].filter(p => p.id !== socket.id);

            if (openRooms[roomId].length !== oldLength) {
                io.to(roomId).emit('updateLobby', openRooms[roomId]);
            }
        }
    });
});

httpServer.listen(4000, () => {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:4000');
    console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', DEV_MODE ? '–í–ö–õ' : '–í–´–ö–õ');
});