// ‚úÖ Results.tsx ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuthenticator } from '@aws-amplify/ui-react';
import { generateClient } from 'aws-amplify/api';
import { getProfile } from '../graphql/queries';
import { updateProfile } from '../graphql/mutations';
import type { ExtendedProfile } from '../types/ExtendedProfile';
import SocketManager from '../utils/SocketManager';

const client = generateClient();

interface Player {
    id: string;
    username: string;
    avatar: string;
    score: number;
    position: number;
    correctAnswers: number;
    isCurrentUser?: boolean;
}

interface ProfileData {
    id: string;
    username: string;
    emoji: string;
    totalGamesPlayed?: number;
    totalScore?: number;
    bestScore?: number;
    averageScore?: number;
}

const Results: React.FC = () => {
    const { gameId } = useParams<{ gameId: string }>();
    const navigate = useNavigate();
    const { user } = useAuthenticator((context) => [context.user]);
    const socketManager = SocketManager.getInstance();

    const [players, setPlayers] = useState<Player[]>([]);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [profile, setProfile] = useState<ProfileData | null>(null);
    const [myProfile, setMyProfile] = useState<ExtendedProfile | null>(null);
    const [error, setError] = useState<string | null>(null);

    // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –∏–º–µ–Ω–∏ –≥–æ—Å—Ç—è
    const extractAvatarFromGuestName = (name: string): string => {
        const emojiMatch = name.match(/[üê∂üê±ü¶äüêªüêºüêØüê∞üê®]/);
        return emojiMatch ? emojiMatch[0] : 'üë§';
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
    useEffect(() => {
        const loadGameResults = async () => {
            try {
                setLoading(true);
                setError(null);

                console.log('üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –¥–ª—è:', gameId);

                // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (user?.userId) {
                    try {
                        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                        const profileResponse = await client.graphql({
                            query: getProfile,
                            variables: { id: user.userId },
                            authMode: 'apiKey' // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'userPool' –Ω–∞ 'apiKey'
                        });
                        const userProfile = profileResponse.data?.getProfile as ExtendedProfile | null;
                        setMyProfile(userProfile);
                        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω:', userProfile);
                    } catch (profileError) {
                        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—è
                    }
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
                const savedResults = localStorage.getItem(`gameResults_${gameId}`);
                if (savedResults) {
                    try {
                        const gameData = JSON.parse(savedResults);
                        console.log('üìä –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:', gameData);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ
                        if (gameData.scores && typeof gameData.scores === 'object') {
                            await processGameResults(gameData.scores, gameData.players);
                            return;
                        } else {
                            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
                        }
                    } catch (parseError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:', parseError);
                    }
                }

                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                setError('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

                // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                const demoResults: Player[] = [
                    {
                        id: 'demo1',
                        username: 'Í≤åÏûÑ ÏôÑÎ£å!',
                        avatar: 'üéâ',
                        score: 3,
                        position: 1,
                        correctAnswers: 3,
                        isCurrentUser: true
                    }
                ];
                setPlayers(demoResults);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                const fallbackResults: Player[] = [
                    {
                        id: 'error1',
                        username: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                        avatar: '‚ö†Ô∏è',
                        score: 0,
                        position: 1,
                        correctAnswers: 0
                    }
                ];
                setPlayers(fallbackResults);
            } finally {
                setLoading(false);
            }
        };

        if (gameId) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Game –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            setTimeout(loadGameResults, 500);
        }
    }, [gameId, user?.userId]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
    const processGameResults = async (
        scores: { [socketId: string]: number },
        playersInfo?: { [socketId: string]: { name: string; avatar?: string } }
    ) => {
        try {
            const socket = socketManager.getSocket();
            const mySocketId = socket.id;

            console.log('üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
            console.log('üìä –û—á–∫–∏:', scores);
            console.log('üë• –ò–≥—Ä–æ–∫–∏:', playersInfo);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            if (!scores || Object.keys(scores).length === 0) {
                console.log('‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∫–æ–≤');
                throw new Error('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Player
            const gameResults: Player[] = Object.entries(scores)
                .map(([socketId, score]) => {
                    const isMe = socketId === mySocketId;
                    const playerInfo = playersInfo?.[socketId];

                    let username: string;
                    let avatar: string;

                    if (isMe && myProfile) {
                        // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                        username = myProfile.username || user?.username || playerInfo?.name || 'ÎÇò';
                        avatar = myProfile.emoji || playerInfo?.avatar || extractAvatarFromGuestName(playerInfo?.name || '') || 'üòé';
                    } else if (isMe) {
                        // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        username = user?.username || playerInfo?.name || 'ÎÇò';
                        avatar = playerInfo?.avatar || extractAvatarFromGuestName(playerInfo?.name || '') || 'üòé';
                    } else {
                        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        username = playerInfo?.name || `ÌîåÎ†àÏù¥Ïñ¥${socketId.slice(-4)}`;
                        avatar = playerInfo?.avatar || extractAvatarFromGuestName(playerInfo?.name || '') || 'üë§';
                    }

                    return {
                        id: socketId,
                        username: username,
                        avatar: avatar,
                        score: score,
                        correctAnswers: score, // –í –Ω–∞—à–µ–π –∏–≥—Ä–µ –±–∞–ª–ª = –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                        position: 0, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                        isCurrentUser: isMe
                    };
                })
                .sort((a, b) => b.score - a.score) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                .map((player, index) => ({ ...player, position: index + 1 })); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é

            console.log('üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', gameResults);
            setPlayers(gameResults);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (user?.userId) {
                const userResult = gameResults.find(p => p.isCurrentUser);
                if (userResult) {
                    await saveUserGameResult(userResult);
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            throw error;
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const saveUserGameResult = async (userResult: Player) => {
        if (!user?.userId || !gameId) {
            console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ gameId');
            return;
        }

        try {
            setSaving(true);
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î:', userResult);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await updateUserProfile(userResult.score);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error);
            setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–æ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ)');
        } finally {
            setSaving(false);
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    const updateUserProfile = async (newScore: number) => {
        if (!user?.userId) return;

        try {
            console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            const profileResponse = await client.graphql({
                query: getProfile,
                variables: { id: user.userId },
                authMode: 'apiKey' // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'userPool' –Ω–∞ 'apiKey'
            });

            const currentProfile = profileResponse.data?.getProfile as ExtendedProfile | null;

            if (currentProfile) {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                const currentGames = (currentProfile.totalGamesPlayed as number) || 0;
                const currentScore = (currentProfile.totalScore as number) || 0;
                const currentBest = (currentProfile.bestScore as number) || 0;

                const newTotalGames = currentGames + 1;
                const newTotalScore = currentScore + newScore;
                const newBestScore = Math.max(currentBest, newScore);
                const newAverageScore = Math.round((newTotalScore / newTotalGames) * 10) / 10;

                console.log('üìä –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
                    totalGames: newTotalGames,
                    totalScore: newTotalScore,
                    bestScore: newBestScore,
                    averageScore: newAverageScore
                });

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–∞–∫ –∫–∞–∫ —Å—Ö–µ–º–∞ –ë–î –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞)
                setProfile({
                    id: currentProfile.id,
                    username: currentProfile.username || '',
                    emoji: currentProfile.emoji || '',
                    totalGamesPlayed: newTotalGames,
                    totalScore: newTotalScore,
                    bestScore: newBestScore,
                    averageScore: newAverageScore,
                });

                // –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                try {
                    await client.graphql({
                        query: updateProfile,
                        variables: {
                            input: {
                                id: currentProfile.id,
                                username: currentProfile.username,
                                emoji: currentProfile.emoji,
                                // –ù–æ–≤—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã
                            }
                        },
                        authMode: 'apiKey' // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–º–µ–Ω–µ–Ω–æ —Å 'userPool' –Ω–∞ 'apiKey'
                    });

                    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
                } catch (updateError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î:', updateError);
                }

            } else {
                console.log('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            // –ù–ï –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤—Ä–µ–º—è –∏—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            setTimeout(() => {
                if (gameId) {
                    localStorage.removeItem(`gameResults_${gameId}`);
                    console.log('üßπ –û—á–∏—â–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –∏–∑ localStorage');
                }
            }, 30000); // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        };
    }, [gameId]);

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-100 to-pink-100">
                <div className="bg-white rounded-xl shadow-lg p-8 text-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
                    <p className="text-lg font-semibold">Í≤åÏûÑ Í≤∞Í≥º Î°úÎî© Ï§ë...</p>
                    <p className="text-sm text-gray-500 mt-2">Ïã§Ï†ú Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï≤òÎ¶¨ÌïòÍ≥† ÏûàÏäµÎãàÎã§</p>
                    {saving && <p className="text-sm text-gray-500 mt-2">Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû• Ï§ë...</p>}
                </div>
            </div>
        );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MVP (Most Valuable Player)
    const mvp = players[0];
    const hasRealData = players.length > 0 && players[0].id !== 'demo1' && players[0].id !== 'error1';

    return (
        <div className="min-h-screen bg-gradient-to-br from-indigo-100 to-pink-100 p-6">
            <div className="max-w-4xl mx-auto">
                <div className="bg-white rounded-xl shadow-lg p-6">
                    <h1 className="text-3xl font-bold mb-2 text-center">üéÆ Í≤åÏûÑ Í≤∞Í≥º</h1>
                    <p className="text-center text-gray-600 mb-2">Í≤åÏûÑ #{gameId}</p>

                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö */}
                    <div className="text-center mb-4">
                        {hasRealData ? (
                            <div className="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-lg">
                                ‚úÖ Ïã§Ï†ú Í≤åÏûÑ Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞
                            </div>
                        ) : (
                            <div className="inline-flex items-center px-4 py-2 bg-yellow-100 text-yellow-800 rounded-lg">
                                ‚ö†Ô∏è Îç∞Î™® Îç∞Ïù¥ÌÑ∞ (Í≤åÏûÑ Í≤∞Í≥ºÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå)
                            </div>
                        )}
                    </div>

                    {/* –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
                    {saving && (
                        <div className="text-center mb-4">
                            <div className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 rounded-lg">
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...
                            </div>
                        </div>
                    )}

                    {/* –û—à–∏–±–∫–∞ */}
                    {error && (
                        <div className="text-center mb-4">
                            <div className="inline-flex items-center px-4 py-2 bg-red-100 text-red-800 rounded-lg">
                                ‚ö†Ô∏è {error}
                            </div>
                        </div>
                    )}

                    {/* MVP —Å–µ–∫—Ü–∏—è */}
                    {mvp && (
                        <div className="bg-gradient-to-r from-purple-100 to-pink-100 rounded-xl p-6 mb-8 shadow-inner">
                            <div className="text-center mb-2">üèÜ MVP üèÜ</div>
                            <div className="flex items-center justify-center mb-3">
                                <div className="text-6xl mr-4">{mvp.avatar}</div>
                                <div>
                                    <h2 className="text-2xl font-bold">{mvp.username}</h2>
                                    <p className="text-gray-700">Ï†ïÎãµ Ïàò: {mvp.correctAnswers}/3</p>
                                    <p className="text-gray-700">ÏµúÏ¢Ö Ï†êÏàò: {mvp.score}Ï†ê</p>
                                    {mvp.isCurrentUser && (
                                        <p className="text-sm text-blue-600 font-semibold">üéâ Ï∂ïÌïòÌï©ÎãàÎã§!</p>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}

                    {/* –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold mb-4">üìä ÏµúÏ¢Ö ÏàúÏúÑ</h2>
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead>
                                <tr className="bg-gray-100">
                                    <th className="px-4 py-2 text-left">ÏàúÏúÑ</th>
                                    <th className="px-4 py-2 text-left">ÌîåÎ†àÏù¥Ïñ¥</th>
                                    <th className="px-4 py-2 text-right">Ï†êÏàò</th>
                                    <th className="px-4 py-2 text-right">Ï†ïÎãµ Ïàò</th>
                                    <th className="px-4 py-2 text-right">Ï†ïÎãµÎ•†</th>
                                </tr>
                                </thead>
                                <tbody>
                                {players.map(player => (
                                    <tr key={player.id} className={`border-b hover:bg-gray-50 ${
                                        player.position === 1 ? 'bg-yellow-50' :
                                            player.isCurrentUser ? 'bg-blue-50' : ''
                                    }`}>
                                        <td className="px-4 py-3">
                                            {player.position === 1 ? 'ü•á' :
                                                player.position === 2 ? 'ü•à' :
                                                    player.position === 3 ? 'ü•â' : `${player.position}ÏúÑ`}
                                        </td>
                                        <td className="px-4 py-3">
                                            <div className="flex items-center">
                                                <span className="text-2xl mr-2">{player.avatar}</span>
                                                <div>
                                                    <span className="font-medium">{player.username}</span>
                                                    {player.isCurrentUser && (
                                                        <span className="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">ÎÇò</span>
                                                    )}
                                                </div>
                                            </div>
                                        </td>
                                        <td className="px-4 py-3 text-right font-semibold text-lg">{player.score}Ï†ê</td>
                                        <td className="px-4 py-3 text-right">{player.correctAnswers}/3</td>
                                        <td className="px-4 py-3 text-right">
                                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                                player.correctAnswers === 3 ? 'bg-green-100 text-green-800' :
                                                    player.correctAnswers >= 2 ? 'bg-yellow-100 text-yellow-800' :
                                                        'bg-red-100 text-red-800'
                                            }`}>
                                                {Math.round((player.correctAnswers / 3) * 100)}%
                                            </span>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
                    {profile && (
                        <div className="bg-gray-50 rounded-xl p-6 mb-8">
                            <h2 className="text-xl font-bold mb-4">üìà Í∞úÏù∏ ÌÜµÍ≥Ñ (ÏóÖÎç∞Ïù¥Ìä∏Îê®)</h2>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                                    <div className="text-2xl font-bold text-purple-600">{profile.totalGamesPlayed || 0}</div>
                                    <div className="text-sm text-gray-600">Ï¥ù Í≤åÏûÑ Ïàò</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                                    <div className="text-2xl font-bold text-green-600">{profile.bestScore || 0}</div>
                                    <div className="text-sm text-gray-600">ÏµúÍ≥† Ï†êÏàò</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                                    <div className="text-2xl font-bold text-blue-600">{profile.totalScore || 0}</div>
                                    <div className="text-sm text-gray-600">Ï¥ù Ï†êÏàò</div>
                                </div>
                                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                                    <div className="text-2xl font-bold text-orange-600">{(profile.averageScore || 0).toFixed(1)}</div>
                                    <div className="text-sm text-gray-600">ÌèâÍ∑† Ï†êÏàò</div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="flex flex-col space-y-3 sm:flex-row sm:space-y-0 sm:space-x-4">
                        <button
                            onClick={() => navigate('/quick-join')}
                            className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-3 rounded-lg font-bold hover:opacity-90 transition-opacity"
                        >
                            üéÆ Îã§Ïãú ÌîåÎ†àÏù¥
                        </button>

                        <button
                            onClick={() => navigate('/ranking')}
                            className="flex-1 bg-gradient-to-r from-blue-500 to-teal-500 text-white px-6 py-3 rounded-lg font-bold hover:opacity-90 transition-opacity"
                        >
                            üèÜ Îû≠ÌÇπ Î≥¥Í∏∞
                        </button>

                        <button
                            onClick={() => navigate('/')}
                            className="flex-1 bg-gray-500 text-white px-6 py-3 rounded-lg font-bold hover:bg-gray-600 transition-colors"
                        >
                            üè† Î©îÏù∏ÏúºÎ°ú
                        </button>
                    </div>

                    {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    {hasRealData && (
                        <div className="mt-6 p-4 bg-gray-100 rounded-lg">
                            <p className="text-sm text-gray-600 text-center">
                                ‚úÖ Ïù¥ Í≤∞Í≥ºÎäî Ïã§Ï†ú Í≤åÏûÑÏóêÏÑú ÏñªÏùÄ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§
                            </p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default Results;