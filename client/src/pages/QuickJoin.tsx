import React, { useEffect, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthenticator } from '@aws-amplify/ui-react';
import { generateClient } from 'aws-amplify/api';
import { getProfile } from '../graphql/queries';
import { createProfile, updateProfile } from '../graphql/mutations';
import type { ExtendedProfile } from '../types/ExtendedProfile';
import SocketManager from '../utils/SocketManager';

const client = generateClient();

function getRandomGuestName() {
    const emojis = ['üê∂', 'üê±', 'ü¶ä', 'üêª', 'üêº', 'üêØ', 'üê∞', 'üê®'];
    const emoji = emojis[Math.floor(Math.random() * emojis.length)];
    return `Í≤åÏä§Ìä∏ ${emoji}`;
}

const QuickJoin: React.FC = () => {
    const navigate = useNavigate();
    const { user } = useAuthenticator((context) => [context.user]);
    const [roomId, setRoomId] = useState('');
    const [players, setPlayers] = useState<{ id: string; name: string }[]>([]);
    const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'joining' | 'waiting'>('connecting');
    const [mySocketId, setMySocketId] = useState('');
    const [countdown, setCountdown] = useState(0);
    const hasJoinedRef = useRef(false);
    const socketManager = SocketManager.getInstance();

    useEffect(() => {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            console.log('üßπ QuickJoin —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, –æ—á–∏—Å—Ç–∫–∞...');
            // –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è Game
            // socketManager.disconnect();
        };
    }, []);

    useEffect(() => {
        // –û—Ç–ª–∞–¥–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user?.userId || '–ì–æ—Å—Ç—å');
        console.log('üîë –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', !!user?.userId);

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (hasJoinedRef.current) return;

        const socket = socketManager.getSocket();
        setMySocketId(socket.id || '');

        const fetchNameAndJoin = async () => {
            if (hasJoinedRef.current) return;

            try {
                let playerName = '';

                if (!user?.userId) {
                    playerName = getRandomGuestName();
                } else {
                    try {
                        console.log('üë§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î...');

                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                        const result = await client.graphql({
                            query: getProfile,
                            variables: { id: user.userId },
                            authMode: 'userPool'
                        });

                        let profile = result?.data?.getProfile as ExtendedProfile | null;

                        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        if (!profile) {
                            console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');
                            const randomEmoji = ['üê∂', 'üê±', 'ü¶ä', 'üêª', 'üêº', 'üêØ', 'üê∞', 'üê®'][Math.floor(Math.random() * 8)];

                            const newProfileResponse = await client.graphql({
                                query: createProfile,
                                variables: {
                                    input: {
                                        id: user.userId,
                                        username: user.username || `ÌîåÎ†àÏù¥Ïñ¥_${Math.floor(Math.random() * 1000)}`,
                                        emoji: randomEmoji,
                                        // –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, —Ç–∞–∫ –∫–∞–∫ —Ç–∏–ø—ã –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                                    }
                                },
                                authMode: 'userPool'
                            });

                            profile = newProfileResponse.data?.createProfile as ExtendedProfile;
                            console.log('‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', profile);

                            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–≥—Ä–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
                            if (profile) {
                                try {
                                    const updateResponse = await client.graphql({
                                        query: updateProfile,
                                        variables: {
                                            input: {
                                                id: profile.id,
                                                username: profile.username,
                                                emoji: profile.emoji,
                                                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
                                                // totalGamesPlayed: 0,
                                                // totalScore: 0,
                                                // bestScore: 0,
                                                // averageScore: 0.0
                                            }
                                        },
                                        authMode: 'userPool'
                                    });
                                    profile = updateResponse.data?.updateProfile as ExtendedProfile;
                                    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–≥—Ä–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏:', profile);
                                } catch (updateError) {
                                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ –ø–æ–ª—è, –Ω–æ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω');
                                }
                            }
                        } else {
                            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:', profile);

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å—Ö–µ–º–∞ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
                            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω:', profile);
                            // –£–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏
                        }

                        playerName = profile?.username || user.username || `ÌîåÎ†àÏù¥Ïñ¥_${Math.floor(Math.random() * 1000)}`;

                    } catch (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:', err);
                        // Fallback –∫ username –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–º–µ–Ω–∏
                        playerName = user.username || `ÌîåÎ†àÏù¥Ïñ¥_${Math.floor(Math.random() * 1000)}`;
                    }
                }

                console.log('üéØ Ï∞∏Í∞Ä:', playerName);
                setConnectionStatus('joining');
                socket.emit('quickJoin', { name: playerName });
                hasJoinedRef.current = true;

            } catch (error) {
                console.error('Ï∞∏Í∞Ä Ïã§Ìå®');
                setConnectionStatus('connecting');
            }
        };

        // ÏÜåÏºì Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨
        const handleConnect = () => {
            console.log('‚úÖ Ïó∞Í≤∞ ÏôÑÎ£å');
            setMySocketId(socket.id || '');
            setConnectionStatus('connected');
            setTimeout(fetchNameAndJoin, 300);
        };

        const handleJoinedRoom = (roomId: string) => {
            console.log('üè† Î∞© Ï∞∏Í∞Ä:', roomId);
            setRoomId(roomId);
            setConnectionStatus('waiting');

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
            setCountdown(5);
            const countdownInterval = setInterval(() => {
                setCountdown(prev => {
                    if (prev <= 1) {
                        clearInterval(countdownInterval);
                        console.log('‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä');
                        navigate(`/game/${roomId}`);
                        return 0;
                    }
                    return prev - 1;
                });
            }, 1000);
        };

        const handleUpdateLobby = (playerList: { id: string; name: string }[]) => {
            console.log('üë• ÌîåÎ†àÏù¥Ïñ¥ ÏóÖÎç∞Ïù¥Ìä∏:', playerList.length, 'Î™Ö');
            setPlayers(playerList);
        };

        const handleGoToGame = (gameRoomId: string) => {
            console.log('üéÆ *** –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï goToGame ***');
            console.log('üöÄ –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:', gameRoomId);
            console.log('üîç –¢–µ–∫—É—â–∏–π URL:', window.location.href);
            console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞:', `/game/${gameRoomId}`);

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –µ—Å–ª–∏ –æ–Ω –∏–¥–µ—Ç
            setCountdown(0);

            try {
                console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º navigate...');
                navigate(`/game/${gameRoomId}`);
                console.log('‚úÖ navigate() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ URL —á–µ—Ä–µ–∑ 500–º—Å
                setTimeout(() => {
                    console.log('üîç URL —á–µ—Ä–µ–∑ 500–º—Å:', window.location.href);
                    if (!window.location.href.includes('/game/')) {
                        console.log('‚ùå URL –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º window.location');
                        window.location.href = `/game/${gameRoomId}`;
                    }
                }, 500);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ navigate():', error);
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ window.location
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ window.location...');
                window.location.href = `/game/${gameRoomId}`;
            }
        };

        const handleDisconnect = () => {
            setConnectionStatus('connecting');
        };

        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
        socket.on('connect', handleConnect);
        socket.on('joinedRoom', handleJoinedRoom);
        socket.on('updateLobby', handleUpdateLobby);
        socket.on('goToGame', handleGoToGame);
        socket.on('disconnect', handleDisconnect);

        // –û—Ç–ª–∞–¥–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞ (SocketManager —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è)
        // socket.onAny((eventName, ...args) => {
        //     console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${eventName}`, args);
        // });

        // –û—Ç–ª–∞–¥–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞
        socket.onAny((eventName, ...args) => {
            console.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${eventName}`, args);
        });

        // Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏúºÎ©¥ Î∞îÎ°ú Ï∞∏Í∞Ä ÏãúÎèÑ
        if (socket.connected) {
            handleConnect();
        }

        return () => {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ QuickJoin...');
            // socket.offAny(); // –£–±–∏—Ä–∞–µ–º —Ç–∞–∫ –∫–∞–∫ SocketManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è–º–∏
            socket.off('connect', handleConnect);
            socket.off('joinedRoom', handleJoinedRoom);
            socket.off('updateLobby', handleUpdateLobby);
            socket.off('goToGame', handleGoToGame);
            socket.off('disconnect', handleDisconnect);
        };
    }, [user?.userId, navigate]);

    const getStatusMessage = () => {
        switch (connectionStatus) {
            case 'connecting': return 'üîÑ Ïó∞Í≤∞ Ï§ë...';
            case 'connected': return '‚úÖ Ïó∞Í≤∞Îê®';
            case 'joining': return 'üéØ Ï∞∏Í∞Ä Ï§ë...';
            case 'waiting': return '‚è≥ Í≤åÏûÑ ÏãúÏûë ÎåÄÍ∏∞...';
            default: return '‚ùì Ïïå Ïàò ÏóÜÏùå';
        }
    };

    const getStatusColor = () => {
        switch (connectionStatus) {
            case 'connecting': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
            case 'connected': return 'text-green-600 bg-green-50 border-green-200';
            case 'joining': return 'text-blue-600 bg-blue-50 border-blue-200';
            case 'waiting': return 'text-purple-600 bg-purple-50 border-purple-200';
            default: return 'text-gray-600 bg-gray-50 border-gray-200';
        }
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen p-6 bg-gradient-to-br from-purple-100 to-blue-100">
            <div className="bg-white rounded-xl shadow-xl p-8 max-w-md w-full text-center">
                <h1 className="text-3xl font-bold text-gray-800 mb-6">üéØ Îß§ÏπòÎ©îÏù¥ÌÇπ</h1>

                <div className="space-y-4">
                    {/* Ïó∞Í≤∞ ÏÉÅÌÉú */}
                    <div className={`border-2 rounded-lg p-4 ${getStatusColor()}`}>
                        <p className="text-sm font-medium mb-1">Ïó∞Í≤∞ ÏÉÅÌÉú</p>
                        <p className="font-bold text-lg">{getStatusMessage()}</p>
                        {connectionStatus === 'connecting' && (
                            <div className="flex justify-center mt-2">
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current"></div>
                            </div>
                        )}
                    </div>

                    {/* Î∞© Ï†ïÎ≥¥ */}
                    {roomId && (
                        <div className="bg-purple-50 border-2 border-purple-200 rounded-lg p-4">
                            <p className="text-sm text-purple-600 font-medium mb-1">Î∞© Î≤àÌò∏</p>
                            <p className="font-mono text-lg font-bold text-purple-800">{roomId}</p>
                        </div>
                    )}

                    {/* Ï∞∏Í∞ÄÏûê Î™©Î°ù */}
                    <div className="bg-green-50 border-2 border-green-200 rounded-lg p-4">
                        <h2 className="font-bold mb-3 text-green-800 text-lg">
                            üë• Ï∞∏Í∞ÄÏûê ({players.length}/5)
                        </h2>

                        {players.length === 0 ? (
                            <div className="text-sm text-green-600 py-4 space-y-2">
                                <div>ÏïÑÏßÅ ÏïÑÎ¨¥ÎèÑ ÏóÜÏñ¥Ïöî...</div>
                                {connectionStatus === 'waiting' && (
                                    <div className="animate-pulse">ÌîåÎ†àÏù¥Ïñ¥Î•º Í∏∞Îã§Î¶¨Îäî Ï§ë...</div>
                                )}
                            </div>
                        ) : (
                            <ul className="space-y-2">
                                {players.map((p, index) => (
                                    <li key={p.id} className="flex items-center justify-between bg-white p-3 rounded-lg shadow-sm">
                                        <span className="font-medium text-gray-700">
                                            {index + 1}. {p.name}
                                        </span>
                                        {p.id === mySocketId && (
                                            <span className="text-xs bg-blue-500 text-white px-3 py-1 rounded-full font-bold">
                                                ÎÇò
                                            </span>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>

                    {/* ÌïòÎã® Ï†ïÎ≥¥ */}
                    <div className="text-xs text-gray-500 space-y-2 bg-gray-50 p-4 rounded-lg border">
                        <div className="flex items-center justify-center gap-2">
                            <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                            <span>Í∞úÎ∞ú Î™®Îìú: 1Î™ÖÏù¥Ïñ¥ÎèÑ Í≤åÏûÑ ÏãúÏûë</span>
                        </div>
                        {connectionStatus === 'waiting' && players.length >= 1 && (
                            <div className="space-y-2">
                                <div className="text-green-600 font-semibold text-sm">
                                    üéÆ Í≤åÏûÑ ÏãúÏûëÍπåÏßÄ: {countdown}Ï¥à
                                </div>
                                <button
                                    onClick={() => roomId && navigate(`/game/${roomId}`)}
                                    className="px-4 py-2 bg-green-500 text-white rounded-lg text-sm hover:bg-green-600 transition-colors"
                                >
                                    ÏßÄÍ∏à ÏãúÏûëÌïòÍ∏∞
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default QuickJoin;