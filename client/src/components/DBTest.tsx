// client/src/components/DBTest.tsx
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

import React, { useState } from 'react';
import { generateClient } from 'aws-amplify/api';
import { useAuthenticator } from '@aws-amplify/ui-react';
import { getProfile, listProfiles } from '../graphql/queries';
import { createProfile, updateProfile } from '../graphql/mutations';

const client = generateClient();

const DBTest: React.FC = () => {
    const { user } = useAuthenticator((context) => [context.user]);
    const [testResult, setTestResult] = useState<string>('');
    const [loading, setLoading] = useState(false);

    const testDatabaseConnection = async () => {
        setLoading(true);
        setTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...\n');

        try {
            // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            setTestResult(prev => prev + '1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getProfile...\n');

            const profileResponse = await client.graphql({
                query: getProfile,
                variables: { id: user?.userId || 'test' },
                authMode: 'userPool'
            });

            setTestResult(prev => prev + `‚úÖ getProfile —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(profileResponse.data?.getProfile)}\n\n`);

            // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if (!profileResponse.data?.getProfile) {
                setTestResult(prev => prev + '2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...\n');

                const createResponse = await client.graphql({
                    query: createProfile,
                    variables: {
                        input: {
                            id: user?.userId || `test-${Date.now()}`,
                            username: user?.username || 'TestUser',
                            emoji: 'üß™'
                        }
                    },
                    authMode: 'userPool'
                });

                setTestResult(prev => prev + `‚úÖ createProfile —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(createResponse.data?.createProfile)}\n\n`);
            }

            // 3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            setTestResult(prev => prev + '3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ updateProfile...\n');

            const updateResponse = await client.graphql({
                query: updateProfile,
                variables: {
                    input: {
                        id: user?.userId || 'test',
                        username: user?.username || 'TestUser',
                        emoji: 'üî¨'
                    }
                },
                authMode: 'userPool'
            });

            setTestResult(prev => prev + `‚úÖ updateProfile —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(updateResponse.data?.updateProfile)}\n\n`);

            // 4. –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
            setTestResult(prev => prev + '4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ listProfiles...\n');

            const listResponse = await client.graphql({
                query: listProfiles,
                variables: { limit: 5 },
                authMode: 'userPool'
            });

            setTestResult(prev => prev + `‚úÖ listProfiles —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ ${listResponse.data?.listProfiles?.items?.length || 0} –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n`);

            setTestResult(prev => prev + 'üéâ –í–°–ï –¢–ï–°–¢–´ –ë–î –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!\n');
            setTestResult(prev => prev + '‚úÖ AWS Amplify GraphQL API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
            setTestResult(prev => prev + '‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
            setTestResult(prev => prev + '‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n');

        } catch (error: any) {
            setTestResult(prev => prev + `‚ùå –û–®–ò–ë–ö–ê –ë–î: ${error.message}\n`);
            setTestResult(prev => prev + `üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error, null, 2)}\n`);
        } finally {
            setLoading(false);
        }
    };

    const testSchema = async () => {
        setLoading(true);
        setTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î...\n');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ Profile
            const introspectionQuery = `
                query IntrospectionQuery {
                    __schema {
                        types {
                            name
                            fields {
                                name
                                type {
                                    name
                                }
                            }
                        }
                    }
                }
            `;

            const result = await client.graphql({
                query: introspectionQuery,
                authMode: 'userPool'
            });

            setTestResult(prev => prev + '‚úÖ Introspection –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n');
            setTestResult(prev => prev + '–°—Ö–µ–º–∞ –ë–î —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞\n');

        } catch (error: any) {
            setTestResult(prev => prev + `‚ùå –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã: ${error.message}\n`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="p-6 bg-white rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold mb-4">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î (AWS Amplify)</h2>

            <div className="space-x-4 mb-4">
                <button
                    onClick={testDatabaseConnection}
                    disabled={loading}
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400"
                >
                    {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π'}
                </button>

                <button
                    onClick={testSchema}
                    disabled={loading}
                    className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-gray-400"
                >
                    –¢–µ—Å—Ç —Å—Ö–µ–º—ã
                </button>
            </div>

            <div className="bg-gray-100 p-4 rounded-lg min-h-32">
                <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                <pre className="text-sm whitespace-pre-wrap">{testResult || '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}</pre>
            </div>

            <div className="mt-4 text-sm text-gray-600">
                <p><strong>–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</strong></p>
                <ul className="list-disc ml-6">
                    <li>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AWS AppSync GraphQL API</li>
                    <li>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Cognito</li>
                    <li>CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ (Create, Read, Update)</li>
                    <li>–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>
                    <li>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (@auth –¥–∏—Ä–µ–∫—Ç–∏–≤—ã)</li>
                </ul>
            </div>
        </div>
    );
};

export default DBTest;